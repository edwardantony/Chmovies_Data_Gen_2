type Genre @aws_iam @aws_api_key {
  id: ID!
  name: String!
  sortOrder: Int
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input AmplifyAIConversationTurnErrorInput {
  errorType: String!
  message: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelGenreConnection @aws_api_key @aws_iam {
  items: [Genre]!
  nextToken: String
}

input ModelGenreFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  sortOrder: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelGenreFilterInput]
  or: [ModelGenreFilterInput]
  not: ModelGenreFilterInput
}

type Query {
  getGenre(id: ID!): Genre @aws_api_key @aws_iam
  listGenres(id: ID, filter: ModelGenreFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelGenreConnection @aws_api_key @aws_iam
  listGenreByName(name: String!, sortDirection: ModelSortDirection, filter: ModelGenreFilterInput, limit: Int, nextToken: String): ModelGenreConnection @aws_api_key @aws_iam
  listGenreBySortOrder(sortOrder: Int!, sortDirection: ModelSortDirection, filter: ModelGenreFilterInput, limit: Int, nextToken: String): ModelGenreConnection @aws_api_key @aws_iam
}

input ModelGenreConditionInput {
  name: ModelStringInput
  sortOrder: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelGenreConditionInput]
  or: [ModelGenreConditionInput]
  not: ModelGenreConditionInput
}

input CreateGenreInput {
  id: ID
  name: String!
  sortOrder: Int
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdateGenreInput {
  id: ID!
  name: String
  sortOrder: Int
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeleteGenreInput {
  id: ID!
}

type Mutation {
  createGenre(input: CreateGenreInput!, condition: ModelGenreConditionInput): Genre @aws_api_key @aws_iam
  updateGenre(input: UpdateGenreInput!, condition: ModelGenreConditionInput): Genre @aws_api_key @aws_iam
  deleteGenre(input: DeleteGenreInput!, condition: ModelGenreConditionInput): Genre @aws_api_key @aws_iam
}

input ModelSubscriptionGenreFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  sortOrder: ModelSubscriptionIntInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionGenreFilterInput]
  or: [ModelSubscriptionGenreFilterInput]
}

type Subscription {
  onCreateGenre(filter: ModelSubscriptionGenreFilterInput): Genre @aws_subscribe(mutations: ["createGenre"]) @aws_api_key @aws_iam
  onUpdateGenre(filter: ModelSubscriptionGenreFilterInput): Genre @aws_subscribe(mutations: ["updateGenre"]) @aws_api_key @aws_iam
  onDeleteGenre(filter: ModelSubscriptionGenreFilterInput): Genre @aws_subscribe(mutations: ["deleteGenre"]) @aws_api_key @aws_iam
}
