input AmplifyAIConversationTurnErrorInput {
	errorType: String!
	message: String!
}

input CreateTodoInput {
	content: String
	id: ID
}

input DeleteTodoInput {
	id: ID!
}

enum ModelAttributeTypes {
	binary
	binarySet
	bool
	list
	map
	number
	numberSet
	string
	stringSet
	_null
}

input ModelBooleanInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelSubscriptionBooleanInput {
	ne: Boolean
	eq: Boolean
}

input ModelSubscriptionFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	in: [Float]
	notIn: [Float]
}

input ModelSubscriptionIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	in: [ID]
	notIn: [ID]
}

input ModelSubscriptionIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	in: [Int]
	notIn: [Int]
}

input ModelSubscriptionStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	in: [String]
	notIn: [String]
}

input ModelSubscriptionTodoFilterInput {
	content: ModelSubscriptionStringInput
	id: ModelSubscriptionIDInput
	createdAt: ModelSubscriptionStringInput
	updatedAt: ModelSubscriptionStringInput
	and: [ModelSubscriptionTodoFilterInput]
	or: [ModelSubscriptionTodoFilterInput]
}

input ModelTodoConditionInput {
	content: ModelStringInput
	and: [ModelTodoConditionInput]
	or: [ModelTodoConditionInput]
	not: ModelTodoConditionInput
	createdAt: ModelStringInput
	updatedAt: ModelStringInput
}

type ModelTodoConnection @aws_api_key
@aws_iam {
	items: [Todo]!
	nextToken: String
}

input ModelTodoFilterInput {
	content: ModelStringInput
	id: ModelIDInput
	createdAt: ModelStringInput
	updatedAt: ModelStringInput
	and: [ModelTodoFilterInput]
	or: [ModelTodoFilterInput]
	not: ModelTodoFilterInput
}

type Todo @aws_iam @aws_api_key {
	content: String
	id: ID!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

type CH_GEN2_Genres @aws_iam @aws_api_key {
	id: ID!
    name: String!
    sortOrder: int
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
}

input UpdateTodoInput {
	content: String
	id: ID!
}

type Mutation {
	createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
		@aws_api_key
@aws_iam
	updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo
		@aws_api_key
@aws_iam
	deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo
		@aws_api_key
@aws_iam
}

type Query {
	getTodo(id: ID!): Todo
		@aws_api_key
@aws_iam
	listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
		@aws_api_key
@aws_iam
}

type Subscription {
	onCreateTodo(filter: ModelSubscriptionTodoFilterInput): Todo
		@aws_subscribe(mutations: ["createTodo"])
@aws_api_key
@aws_iam
	onUpdateTodo(filter: ModelSubscriptionTodoFilterInput): Todo
		@aws_subscribe(mutations: ["updateTodo"])
@aws_api_key
@aws_iam
	onDeleteTodo(filter: ModelSubscriptionTodoFilterInput): Todo
		@aws_subscribe(mutations: ["deleteTodo"])
@aws_api_key
@aws_iam
}