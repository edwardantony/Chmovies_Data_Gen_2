schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type CH_GEN2_Genres @aws_api_key @aws_iam {
  id: ID!
  name: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Todo @aws_api_key @aws_iam {
  id: ID!
  content: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ModelCH_GEN2_GenresConnection @aws_api_key @aws_iam {
  items: [CH_GEN2_Genres]!
  nextToken: String
}

type ModelTodoConnection @aws_api_key @aws_iam {
  items: [Todo]!
  nextToken: String
}

type Mutation {
  # CH_GEN2_Genres CRUD
  createCH_GEN2_Genres(input: CreateCH_GEN2_GenresInput!): CH_GEN2_Genres @aws_api_key @aws_iam
  updateCH_GEN2_Genres(input: UpdateCH_GEN2_GenresInput!): CH_GEN2_Genres @aws_api_key @aws_iam
  deleteCH_GEN2_Genres(input: DeleteCH_GEN2_GenresInput!): CH_GEN2_Genres @aws_api_key @aws_iam

  # Todo CRUD
  createTodo(input: CreateTodoInput!): Todo @aws_api_key @aws_iam
  updateTodo(input: UpdateTodoInput!): Todo @aws_api_key @aws_iam
  deleteTodo(input: DeleteTodoInput!): Todo @aws_api_key @aws_iam
}

type Query {
  # CH_GEN2_Genres queries
  getCH_GEN2_Genres(id: ID!): CH_GEN2_Genres @aws_api_key @aws_iam
  listCH_GEN2_Genres(
    filter: ModelCH_GEN2_GenresFilterInput
    limit: Int
    nextToken: String
  ): ModelCH_GEN2_GenresConnection @aws_api_key @aws_iam

  # Todo queries
  getTodo(id: ID!): Todo @aws_api_key @aws_iam
  listTodos(
    filter: ModelTodoFilterInput
    limit: Int
    nextToken: String
  ): ModelTodoConnection @aws_api_key @aws_iam
}

type Subscription {
  # CH_GEN2_Genres subscriptions
  onCreateCH_GEN2_Genres: CH_GEN2_Genres
    @aws_api_key @aws_iam
    @aws_subscribe(mutations: ["createCH_GEN2_Genres"])
  onUpdateCH_GEN2_Genres: CH_GEN2_Genres
    @aws_api_key @aws_iam
    @aws_subscribe(mutations: ["updateCH_GEN2_Genres"])
  onDeleteCH_GEN2_Genres: CH_GEN2_Genres
    @aws_api_key @aws_iam
    @aws_subscribe(mutations: ["deleteCH_GEN2_Genres"])

  # Todo subscriptions
  onCreateTodo: Todo
    @aws_api_key @aws_iam
    @aws_subscribe(mutations: ["createTodo"])
  onUpdateTodo: Todo
    @aws_api_key @aws_iam
    @aws_subscribe(mutations: ["updateTodo"])
  onDeleteTodo: Todo
    @aws_api_key @aws_iam
    @aws_subscribe(mutations: ["deleteTodo"])
}

# CH_GEN2_Genres Input Types
input CreateCH_GEN2_GenresInput {
  id: ID
  name: String!
}

input UpdateCH_GEN2_GenresInput {
  id: ID!
  name: String
}

input DeleteCH_GEN2_GenresInput {
  id: ID!
}

input ModelCH_GEN2_GenresFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  and: [ModelCH_GEN2_GenresFilterInput]
  or: [ModelCH_GEN2_GenresFilterInput]
  not: ModelCH_GEN2_GenresFilterInput
}

# Todo Input Types (keep existing)
input CreateTodoInput {
  content: String
  id: ID
}

input UpdateTodoInput {
  content: String
  id: ID!
}

input DeleteTodoInput {
  id: ID!
}

input ModelTodoFilterInput {
  and: [ModelTodoFilterInput]
  content: ModelStringInput
  createdAt: ModelStringInput
  id: ModelIDInput
  not: ModelTodoFilterInput
  or: [ModelTodoFilterInput]
  updatedAt: ModelStringInput
}

input ModelTodoConditionInput {
  and: [ModelTodoConditionInput]
  content: ModelStringInput
  createdAt: ModelStringInput
  not: ModelTodoConditionInput
  or: [ModelTodoConditionInput]
  updatedAt: ModelStringInput
}

input ModelSubscriptionTodoFilterInput {
  and: [ModelSubscriptionTodoFilterInput]
  content: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  or: [ModelSubscriptionTodoFilterInput]
  updatedAt: ModelSubscriptionStringInput
}

# Shared Input Types
input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}